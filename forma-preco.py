import streamlit as st
import pandas as pd
import io
import os

st.set_page_config(page_title="Simulador de Pre√ßo de Venda Sobel", layout="wide")
st.title("üìä Simulador de Forma√ß√£o de Pre√ßo de Venda")
st.image("Logo-Suprema-Slogan-Alta-ai-1.webp", width=300)

# Inicializar Session State
if 'df_editado' not in st.session_state:
    st.session_state.df_editado = None

# Carga padr√£o
arquivo_padrao = "Custo de reposi√ß√£o.xlsx"
if os.path.exists(arquivo_padrao):
    df_padrao = pd.read_excel(arquivo_padrao)
    df_padrao.columns = df_padrao.columns.str.strip()
else:
    st.warning("Arquivo padr√£o n√£o encontrado.")
    df_padrao = pd.DataFrame()

# Sidebar
st.sidebar.header("Par√¢metros Globais")
frete_padrao = st.sidebar.number_input("Frete por Caixa (R$)", min_value=0.0, value=1.50, step=0.01)
contrato_percentual = st.sidebar.number_input("% Contrato", min_value=0.0, max_value=100.0, value=1.00, step=0.01) / 100
uf_selecionado = st.sidebar.selectbox("Selecione a UF", options=df_padrao["UF"].dropna().unique().tolist()) if not df_padrao.empty else ""
tipo_frete = st.sidebar.radio("Tipo de Frete", ("CIF", "FOB"))

# Upload
uploaded_file = st.file_uploader("üìÇ Envie sua planilha atualizada (.xlsx)", type="xlsx")

if uploaded_file:
    df_base = pd.read_excel(uploaded_file)
    df_base.columns = df_base.columns.str.strip()
    df_base = df_base[df_base["UF"] == uf_selecionado].copy()
elif not df_padrao.empty:
    df_base = df_padrao[df_padrao["UF"] == uf_selecionado].copy()
else:
    st.stop()

# Produtos esperados
produtos_esperados = [
    "√ÅGUA SANIT√ÅRIA 5L", "√ÅGUA SANIT√ÅRIA 2L", "√ÅGUA SANIT√ÅRIA 1L",
    "CLORO DE 5L / PRO", "CLORO DE 2,5L", "ALVEJANTE 1.5L",
    "AMACIANTE 5L", "AMACIANTE 2L",
    "DESINF. 2L", "DESINF. 2L CLORADO", "DESINF. 5L",
    "LAVA LOU√áAS 500ML", "LAVA LOU√áAS 5L",
    "LAVA ROUPAS 5L", "LAVA ROUPAS 3L", "LAVA ROUPAS 1L",
    "LIMPA VIDROS SQUEEZE 500ML", "DESENGORDURANTE 500ML",
    "MULTI-USO 500ML", "REMOVEDOR 1L", "REMOVEDOR 500ML"
]
df_base = df_base[df_base["Descri√ß√£o"].isin(produtos_esperados)].copy()

# Ajustes iniciais
colunas_necessarias = ["Pre√ßo de Venda", "Quantidade", "Frete Caixa", "%Estrategico", "IPI", "ICMS ST", "ICMS", "MVA"]
for col in colunas_necessarias:
    if col not in df_base.columns:
        df_base[col] = 0.0 if col != "Quantidade" else 1

# Atualiza frete e contrato
df_base["Frete Caixa"] = frete_padrao
df_base["Contrato"] = contrato_percentual

# Fun√ß√£o para preencher pre√ßo de equil√≠brio
def preencher_preco_equilibrio(df):
    df_atualizado = df.copy()
    for index, row in df_atualizado.iterrows():
        custo_total_unit = row["Custo NET"] + row["Custo Fixo"]
        frete_unit = row["Frete Caixa"] if tipo_frete == "CIF" else 0
        despesas_percentuais = (
            row["ICMS"] + row["COFINS"] + row["PIS"] +
            row["Comiss√£o"] + row["Bonifica√ß√£o"] +
            row["Contig√™ncia"] + row["Contrato"] + row["%Estrategico"]
        )
        try:
            preco_equilibrio_unit = (custo_total_unit + frete_unit) / (1 - despesas_percentuais)
        except ZeroDivisionError:
            preco_equilibrio_unit = 0
        df_atualizado.at[index, "Pre√ßo de Venda"] = round(preco_equilibrio_unit, 2)
    return df_atualizado

# Bot√£o Ponto de Equil√≠brio
if st.button("üìå Preencher com Ponto de Equil√≠brio"):
    df_base = preencher_preco_equilibrio(df_base)

# Atualiza Session State
st.session_state.df_editado = df_base.copy()

# Editor de Dados
st.markdown("### ‚úèÔ∏è Edite os dados abaixo para simula√ß√£o em lote")
df_editado = st.data_editor(st.session_state.df_editado, use_container_width=True, num_rows="dynamic")
st.session_state.df_editado = df_editado

# Fun√ß√£o de c√°lculo
def calcular_linha(row):
    preco_venda = row["Pre√ßo de Venda"]
    qtd = row["Quantidade"]
    subtotal = preco_venda * qtd

    frete_total = row["Frete Caixa"] * qtd if tipo_frete == "CIF" else 0
    frete_unit = row["Frete Caixa"] if tipo_frete == "CIF" else 0

    ipi_total = subtotal * row["IPI"]
    mva_percentual = row["MVA"]
    base_icms_st = (subtotal + ipi_total) * (1 + mva_percentual)
    icms_proprio = subtotal * row["ICMS"]
    icms_st = (base_icms_st * row["ICMS"]) - icms_proprio
    icms_st = max(icms_st, 0)

    custo_total_unit = row["Custo NET"] + row["Custo Fixo"]
    despesas_percentuais = (
        row["ICMS"] + row["COFINS"] + row["PIS"] +
        row["Comiss√£o"] + row["Bonifica√ß√£o"] +
        row["Contig√™ncia"] + row["Contrato"] + row["%Estrategico"]
    )

    despesas_reais = preco_venda * despesas_percentuais * qtd + frete_total
    lucro_bruto = (preco_venda - custo_total_unit) * qtd - despesas_reais

    if lucro_bruto > 0:
        lucro_liquido = lucro_bruto / 1.34
        irpj = lucro_liquido * 0.25
        csll = lucro_liquido * 0.09
    else:
        lucro_liquido = lucro_bruto
        irpj = 0
        csll = 0

    receita_total = subtotal
    lucro_percentual = (lucro_liquido / receita_total) * 100 if receita_total > 0 else 0
    total_nf = subtotal + ipi_total + icms_st

    if lucro_liquido < 0:
        try:
            preco_equilibrio_unit = (custo_total_unit + frete_unit) / (1 - despesas_percentuais)
        except ZeroDivisionError:
            preco_equilibrio_unit = 0
    else:
        preco_equilibrio_unit = preco_venda

    return pd.Series({
        "Subtotal (R$)": subtotal,
        "Frete Total (R$)": frete_total,
        "IPI (R$)": ipi_total,
        "Base ICMS-ST (R$)": base_icms_st,
        "ICMS-ST (R$)": icms_st,
        "Lucro Bruto (R$)": lucro_bruto,
        "Lucro L√≠quido (R$)": lucro_liquido,
        "IRPJ (R$)": irpj,
        "CSLL (R$)": csll,
        "Lucro %": lucro_percentual,
        "Total NF (R$)": total_nf,
        "Ponto de Equil√≠brio (R$)": round(preco_equilibrio_unit, 2)
    })

# Aplicar c√°lculo
resultados = st.session_state.df_editado.apply(calcular_linha, axis=1)
resultado_final = pd.concat([st.session_state.df_editado, resultados], axis=1)

# Tabela de resultados
st.markdown("### üìä Resultado da Simula√ß√£o")
def color_negative_red(val):
    try:
        if float(val) < 0:
            return 'color: red'
        return 'color: black'
    except:
        return 'color: black'

styled_df = resultado_final.style.format({
    "Pre√ßo de Venda": "R$ {:.2f}",
    "Custo NET": "R$ {:.2f}",
    "Custo Fixo": "R$ {:.2f}",
    "Subtotal (R$)": "R$ {:.2f}",
    "Frete Total (R$)": "R$ {:.2f}",
    "IPI (R$)": "R$ {:.2f}",
    "Base ICMS-ST (R$)": "R$ {:.2f}",
    "ICMS-ST (R$)": "R$ {:.2f}",
    "Lucro Bruto (R$)": "R$ {:.2f}",
    "Lucro L√≠quido (R$)": "R$ {:.2f}",
    "IRPJ (R$)": "R$ {:.2f}",
    "CSLL (R$)": "R$ {:.2f}",
    "Lucro %": "{:.2f}%",
    "Total NF (R$)": "R$ {:.2f}",
    "Ponto de Equil√≠brio (R$)": "R$ {:.2f}"
}).apply(lambda x: [color_negative_red(v) for v in x],
        subset=["Lucro Bruto (R$)", "Lucro L√≠quido (R$)", "Lucro %"])

st.dataframe(styled_df, use_container_width=True)

# Exporta√ß√£o
st.markdown("### üìÑ Baixar resultado em Excel")
excel_buffer = io.BytesIO()
with pd.ExcelWriter(excel_buffer, engine="xlsxwriter") as writer:
    resultado_final.to_excel(writer, index=False, sheet_name="Resultado")

st.download_button(
    label="üìÑ Baixar Excel com Resultado",
    data=excel_buffer.getvalue(),
    file_name="resultado_simulacao.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)

st.markdown("""
### ‚ÑπÔ∏è **Notas Explicativas**

Este **Simulador de Forma√ß√£o de Pre√ßo de Venda - Sobel Suprema** foi desenvolvido para apoiar as √°reas **Comercial, Financeira e Controladoria**, garantindo uma correta forma√ß√£o de pre√ßo, considerando todos os componentes de custo, despesas, impostos e margens estrat√©gicas.

---

### üéØ **Objetivo**
Permitir que os gestores realizem simula√ß√µes e ajustes na composi√ß√£o do pre√ßo de venda, de forma pr√°tica e transparente, facilitando a an√°lise do impacto de cada vari√°vel na margem e no resultado final.

---

### üß© **L√≥gica de C√°lculo Utilizada**

1Ô∏è‚É£ **Subtotal Calculado**  
O subtotal √© obtido multiplicando o **Pre√ßo de Venda Unit√°rio** pela **Quantidade**:

> **Subtotal = Pre√ßo de Venda √ó Quantidade + Frete Total**  
> (Frete Total = Frete por Caixa √ó Quantidade ‚Üí Somente para frete CIF)

---

2Ô∏è‚É£ **IPI (Imposto sobre Produtos Industrializados)**  
Calculado sobre o subtotal:

> **IPI Total = Subtotal √ó % IPI**

---

3Ô∏è‚É£ **Base de C√°lculo do ICMS-ST**  
A base considera:

> **Base ICMS-ST = (Subtotal + IPI Total) √ó (1 + MVA)**

ICMS-ST a recolher:

> **ICMS-ST = (Base ICMS-ST √ó % ICMS) - (Subtotal √ó % ICMS)**  
*(Se resultado negativo, considera-se zero)*

---

4Ô∏è‚É£ **Despesas Percentuais e Fixas**  
Somat√≥rio dos percentuais:

‚úÖ ICMS  
‚úÖ COFINS  
‚úÖ PIS  
‚úÖ Comiss√£o  
‚úÖ Bonifica√ß√£o  
‚úÖ Conting√™ncia  
‚úÖ Contrato  
‚úÖ % Estrat√©gico  

> **Despesas Reais = Pre√ßo de Venda √ó Œ£(Percentuais) √ó Quantidade + Frete Total**

---

5Ô∏è‚É£ **Lucro Bruto**

> **Lucro Bruto = (Pre√ßo de Venda - Custo Total Unit√°rio) √ó Quantidade - Despesas Reais**

---

6Ô∏è‚É£ **Lucro L√≠quido (Inclui carga tribut√°ria presumida de 34%)**

> **Lucro L√≠quido = Lucro Bruto √∑ 1,34** *(Se positivo)*

---

7Ô∏è‚É£ **Impostos sobre Lucro**

> **IRPJ = Lucro L√≠quido √ó 25%**  
> **CSLL = Lucro L√≠quido √ó 9%**

---

8Ô∏è‚É£ **Percentual de Lucro sobre Receita Bruta**

> **Lucro % = (Lucro L√≠quido + Subtotal) √ó 100 √∑ Receita Bruta**

---

9Ô∏è‚É£ **Total Nota Fiscal**

> **Total NF = Subtotal + IPI Total + ICMS-ST**

---

### üìù **Regras & Premissas**

- Os campos de **IPI, ICMS, COFINS, PIS, MVA e demais percentuais** devem estar preenchidos corretamente.
- O **frete** impacta apenas quando o tipo for **CIF**.
- **Bonifica√ß√£o, Comiss√£o e Contrato** n√£o entram na base de c√°lculo do ICMS-ST, sendo consideradas apenas na an√°lise gerencial.
- O c√°lculo de **IRPJ e CSLL** foi simplificado (25% e 9% respectivamente), podendo ser ajustado conforme o regime fiscal da empresa.
- O campo **% Estrat√©gico** adiciona um mark-up adicional ao pre√ßo de venda.

---

**‚ÑπÔ∏è Nota Complementar: L√≥gica do Ponto de Equil√≠brio**

O "Pre√ßo de Equil√≠brio" reflete o valor m√≠nimo de venda necess√°rio para cobrir todos os custos, despesas e impostos, resultando em um lucro l√≠quido igual a zero. Abaixo, detalhamos a metodologia aplicada para esse c√°lculo:

1. **Pre√ßo de Venda Inicial:** O simulador parte do pre√ßo de venda informado pelo usu√°rio na tabela edit√°vel.
2. **C√°lculo do Lucro L√≠quido:** S√£o descontados os custos fixos (Custo NET + Custo Fixo + Frete, se CIF), as despesas percentuais (ICMS, COFINS, PIS, Comiss√£o, etc.) e, quando houver lucro bruto positivo, os impostos sobre o lucro ‚Äî IRPJ (25%) e CSLL (9%).
3. **Condi√ß√£o de Equil√≠brio:** 
   - Se o lucro l√≠quido for positivo ou zero com o pre√ßo informado, o "Pre√ßo de Equil√≠brio" mant√©m o valor do pre√ßo de venda, indicando que a opera√ß√£o j√° √© vi√°vel.
   - Se o lucro l√≠quido for negativo, o "Pre√ßo de Equil√≠brio" √© recalculado para garantir que a receita iguale os custos e despesas, zerando o lucro l√≠quido.
4. **F√≥rmula do Pre√ßo de Equil√≠brio (quando lucro √© negativo):**
""")


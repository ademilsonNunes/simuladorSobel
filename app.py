import streamlit as st
import pandas as pd
import plotly.express as px

# =============================
# CONFIGURA√á√ÉO DA P√ÅGINA
# =============================
st.set_page_config(page_title="An√°lise Comercial e Fiscal", layout="wide")
st.title("üìä One-Page Report Comercial & Fiscal")

st.markdown("#### 1Ô∏è‚É£ Upload e Valida√ß√£o dos Dados")
st.markdown("Envie o arquivo Excel com as abas **CARTEIRA** e **Mark-up** para an√°lise.")

# =============================
# FUN√á√ïES UTILIT√ÅRIAS
# =============================

def carregar_dados(caminho_arquivo):
    try:
        excel_data = pd.ExcelFile(caminho_arquivo)
        if {"CARTEIRA", "Mark-up"}.issubset(excel_data.sheet_names):
            carteira_df = excel_data.parse("CARTEIRA")
            markup_df = excel_data.parse("Mark-up")
            carteira_df.columns = carteira_df.columns.str.strip().str.upper()
            markup_df.columns = markup_df.columns.str.strip().str.upper()
            return carteira_df, markup_df
        else:
            st.error("O arquivo deve conter as abas 'CARTEIRA' e 'Mark-up'.")
            return None, None
    except Exception as e:
        st.error(f"Erro ao carregar o arquivo: {str(e)}")
        return None, None

# =============================
# FORMATADORES
# =============================
formatar_moeda = lambda x: f"R$ {x:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
formatar_valor = lambda x: f"{x:,.0f}".replace(",", ".")

def highlight_negative(row):
    if "% LUCRO" in row:
        lucro = float(row["% LUCRO"].replace("%", "").replace(",", "."))
    else:
        lucro = float(row["% LUCRO TOTAL"].replace("%", "").replace(",", "."))
    return ["background-color: #ffb3b3" if lucro < 0 else "" for _ in row]

uploaded_file = st.file_uploader("üìÇ Escolha o arquivo Excel", type=["xlsx"])
if uploaded_file:
    carteira_df, markup_df = carregar_dados(uploaded_file)

    if carteira_df is not None:
        st.success("‚úÖ Arquivo carregado com sucesso!")

        # =============================
        # FILTROS
        # =============================
        st.markdown("---")
        st.header("üéØ Filtros para An√°lise")

        clientes = sorted(carteira_df["CLIENTE"].unique())
        ufs = sorted(carteira_df["UF"].unique())
        skus = sorted(carteira_df["SKU"].unique())
        sups = sorted(carteira_df["SUP"].unique()) if "SUP" in carteira_df.columns else []
        vends = sorted(carteira_df["VENDEDOR"].unique()) if "VENDEDOR" in carteira_df.columns else []

        colf1, colf2, colf3, colf4, colf5 = st.columns(5)
        cliente_sel = colf1.selectbox("Filtrar Cliente", ["Todos"] + clientes)
        uf_sel = colf2.selectbox("Filtrar UF", ["Todos"] + ufs)
        sku_sel = colf3.selectbox("Filtrar Produto (SKU)", ["Todos"] + skus)
        sup_sel = colf4.selectbox("Filtrar Supervisor", ["Todos"] + sups) if sups else "Todos"
        vend_sel = colf5.selectbox("Filtrar Vendedor", ["Todos"] + vends) if vends else "Todos"

        # =============================
        # APLICA√á√ÉO DOS FILTROS
        # =============================
        df_filtro = carteira_df.copy()
        if cliente_sel != "Todos":
            df_filtro = df_filtro[df_filtro["CLIENTE"] == cliente_sel]
        if uf_sel != "Todos":
            df_filtro = df_filtro[df_filtro["UF"] == uf_sel]
        if sku_sel != "Todos":
            df_filtro = df_filtro[df_filtro["SKU"] == sku_sel]
        if sup_sel != "Todos" and "SUP" in df_filtro.columns:
            df_filtro = df_filtro[df_filtro["SUP"] == sup_sel]
        if vend_sel != "Todos" and "VENDEDOR" in df_filtro.columns:
            df_filtro = df_filtro[df_filtro["VENDEDOR"] == vend_sel]

        # =============================
        # PAINEL RESUMO
        # =============================
        st.markdown("---")
        st.header("üìå Painel Resumo")

        total_volume = int(df_filtro["QTDE"].sum())
        faturamento = df_filtro["VL.BRUTO"].sum()
        lucro_liq = df_filtro["LUCRO LIQ"].sum()
        preco_medio = faturamento / total_volume if total_volume > 0 else 0
        perc_lucro = (lucro_liq / faturamento) * 100 if faturamento > 0 else 0

        col1, col2, col3, col4 = st.columns(4)
        col1.metric("Total Faturamento (R$)", formatar_moeda(faturamento))
        col2.metric("Volume Total (unid)", formatar_valor(total_volume))
        col3.metric("Pre√ßo M√©dio (R$)", formatar_moeda(preco_medio))
        col4.metric("Lucro L√≠quido (R$)", f"{formatar_moeda(lucro_liq)} ({perc_lucro:.2f}%)")
        # =============================
        # AN√ÅLISE DE LUCRO POR CLIENTE
        # =============================
        st.markdown("---")
        st.subheader("üìÑ Lucro por Cliente")

        lucro_cliente = df_filtro.groupby("CLIENTE")[["VL.BRUTO", "LUCRO LIQ"]].sum().reset_index()
        lucro_cliente["% LUCRO"] = (lucro_cliente["LUCRO LIQ"] / lucro_cliente["VL.BRUTO"]) * 100
        lucro_cliente["VL.BRUTO"] = lucro_cliente["VL.BRUTO"].apply(formatar_moeda)
        lucro_cliente["LUCRO LIQ"] = lucro_cliente["LUCRO LIQ"].apply(formatar_moeda)
        lucro_cliente["% LUCRO"] = lucro_cliente["% LUCRO"].apply(lambda x: f"{x:.2f}%")

        st.dataframe(
            lucro_cliente.style.apply(
                lambda row: ["background-color: #ffb3b3" if float(row["% LUCRO"].replace("%", "").replace(",", ".")) < 0 else "" for _ in row],
                axis=1
            ),
            use_container_width=True
        )

        # =============================
        # AN√ÅLISE DE LUCRO POR SKU
        # =============================
        st.subheader("üìÑ Lucro por Produto (SKU)")

        lucro_sku = df_filtro.groupby("SKU")[["VL.BRUTO", "LUCRO LIQ"]].sum().reset_index()
        lucro_sku["% LUCRO"] = (lucro_sku["LUCRO LIQ"] / lucro_sku["VL.BRUTO"]) * 100
        lucro_sku["VL.BRUTO"] = lucro_sku["VL.BRUTO"].apply(formatar_moeda)
        lucro_sku["LUCRO LIQ"] = lucro_sku["LUCRO LIQ"].apply(formatar_moeda)
        lucro_sku["% LUCRO"] = lucro_sku["% LUCRO"].apply(lambda x: f"{x:.2f}%")

        st.dataframe(
            lucro_sku.style.apply(
                lambda row: ["background-color: #ffb3b3" if float(row["% LUCRO"].replace("%", "").replace(",", ".")) < 0 else "" for _ in row],
                axis=1
            ),
            use_container_width=True
        )

        # =============================
        # GR√ÅFICOS DE LUCRO POR SKU
        # =============================
        st.markdown("---")
        st.subheader("üìä Lucro L√≠quido por Produto (SKU) - Valor (R$)")

        lucro_prod = df_filtro.groupby("SKU")["LUCRO LIQ"].sum().reset_index().sort_values(by="LUCRO LIQ", ascending=False)
        fig_valor = px.bar(lucro_prod, x="LUCRO LIQ", y="SKU", orientation="h", title="Lucro L√≠quido Total por SKU")
        st.plotly_chart(fig_valor, use_container_width=True)

        st.subheader("üìä Lucro L√≠quido por Produto (SKU) - Percentual (%)")

        lucro_pct = df_filtro.groupby("SKU").agg({"LUCRO LIQ": "sum", "VL.BRUTO": "sum"}).reset_index()
        lucro_pct["% LUCRO"] = (lucro_pct["LUCRO LIQ"] / lucro_pct["VL.BRUTO"]) * 100

        fig_pct = px.bar(lucro_pct, x="% LUCRO", y="SKU", orientation="h", title="Percentual de Lucro L√≠quido por SKU")
        fig_pct.update_layout(xaxis_tickformat=".2f")
        st.plotly_chart(fig_pct, use_container_width=True)
        # =============================
        # TABELA DETALHADA DE PRE√áO UNIT√ÅRIO E LUCRO
        # =============================
        st.markdown("---")
        st.subheader("üìÑ Pre√ßo Unit√°rio e Lucro por SKU - An√°lise Detalhada")

        df_precos_aux = df_filtro.copy()
        df_precos_aux["PRECO_UNIT"] = df_precos_aux["VL.BRUTO"] / df_precos_aux["QTDE"]

        precos_resumo = df_precos_aux.groupby("SKU").agg({
            "PRECO_UNIT": ["mean", "min", "max"],
            "LUCRO LIQ": "sum",
            "VL.BRUTO": "sum",
            "QTDE": "sum"
        }).reset_index()

        precos_resumo.columns = [
            "SKU", "PRE√áO M√âDIO UNIT", "PRE√áO M√çNIMO UNIT", "PRE√áO M√ÅXIMO UNIT",
            "LUCRO LIQ", "FATURAMENTO", "VOLUME"
        ]

        precos_resumo["LUCRO UNIT"] = precos_resumo["LUCRO LIQ"] / precos_resumo["VOLUME"]
        precos_resumo["% LUCRO TOTAL"] = (precos_resumo["LUCRO LIQ"] / precos_resumo["FATURAMENTO"]) * 100
        precos_resumo["% LUCRO MIN"] = (precos_resumo["LUCRO UNIT"] / precos_resumo["PRE√áO M√çNIMO UNIT"]) * 100
        precos_resumo["% LUCRO MAX"] = (precos_resumo["LUCRO UNIT"] / precos_resumo["PRE√áO M√ÅXIMO UNIT"]) * 100
        precos_resumo["% LUCRO M√âDIO"] = (precos_resumo["LUCRO UNIT"] / precos_resumo["PRE√áO M√âDIO UNIT"]) * 100

        # Formata√ß√£o
        for col in ["PRE√áO M√âDIO UNIT", "PRE√áO M√çNIMO UNIT", "PRE√áO M√ÅXIMO UNIT", "LUCRO LIQ", "FATURAMENTO", "LUCRO UNIT"]:
            precos_resumo[col] = precos_resumo[col].apply(formatar_moeda)

        for col in ["% LUCRO TOTAL", "% LUCRO MIN", "% LUCRO MAX", "% LUCRO M√âDIO"]:
            precos_resumo[col] = precos_resumo[col].apply(lambda x: f"{x:.2f}%" if isinstance(x, float) else x)

        precos_resumo["VOLUME"] = precos_resumo["VOLUME"].astype(int)

        st.dataframe(precos_resumo.style.apply(highlight_negative, axis=1), use_container_width=True)

        # =============================
        # PESO DO CONTRATO POR CLIENTE
        # =============================
        st.markdown("---")
        st.subheader("üìÑ Peso do Contrato por Cliente")

        df_contrato = df_filtro.groupby("CLIENTE").agg({
            "VL.BRUTO": "sum",
            "TOTAL CONTRATO": "sum",
            "LUCRO LIQ": "sum"
        }).reset_index()

        df_contrato["% CONTRATO"] = (df_contrato["TOTAL CONTRATO"] / df_contrato["VL.BRUTO"]) * 100
        df_contrato["% LUCRO ANTES CONTRATO"] = (df_contrato["LUCRO LIQ"] / df_contrato["VL.BRUTO"]) * 100
        df_contrato["% LUCRO AP√ìS CONTRATO"] = ((df_contrato["LUCRO LIQ"] - df_contrato["TOTAL CONTRATO"]) / df_contrato["VL.BRUTO"]) * 100

        # Formata√ß√£o
        df_contrato["VL.BRUTO"] = df_contrato["VL.BRUTO"].apply(formatar_moeda)
        df_contrato["TOTAL CONTRATO"] = df_contrato["TOTAL CONTRATO"].apply(formatar_moeda)
        df_contrato["LUCRO LIQ"] = df_contrato["LUCRO LIQ"].apply(formatar_moeda)
        df_contrato["% CONTRATO"] = df_contrato["% CONTRATO"].apply(lambda x: f"{x:.2f}%")
        df_contrato["% LUCRO ANTES CONTRATO"] = df_contrato["% LUCRO ANTES CONTRATO"].apply(lambda x: f"{x:.2f}%")
        df_contrato["% LUCRO AP√ìS CONTRATO"] = df_contrato["% LUCRO AP√ìS CONTRATO"].apply(lambda x: f"{x:.2f}%")

        # Fun√ß√£o para destacar linhas negativas
        def highlight_contrato(row):
            lucro = float(row["% LUCRO AP√ìS CONTRATO"].replace("%", "").replace(",", "."))
            return ["background-color: #ffb3b3" if lucro < 0 else "" for _ in row]

        # Exibir tabela
        st.dataframe(df_contrato.style.apply(highlight_contrato, axis=1), use_container_width=True)

        # =============================
        # DASHBOARD FISCAL AJUSTADO
        # =============================
        st.markdown("---")
        st.header("üßæ Dashboard Fiscal")
        
        # Mapeamento correto das colunas
        tributos = {
            "ICMS": "TOTAL ICMS",
            "ICMS-ST": "ICMS_ST",
            "PIS": "TOTAL PIS",
            "COFINS": "TOTAL COFINS",
            "IPI": "TOTAL IPI",
            "IRPJ": "IRPJ",
            "CSLL": "CSLL"
        }
        
        valores = {}
        for tributo, col in tributos.items():
            valores[tributo] = carteira_df[col].sum() if col in carteira_df.columns else 0
        
        faturamento_total = carteira_df["VL.BRUTO"].sum()
        lucro_liq_total = carteira_df["LUCRO LIQ"].sum()
        
        # Separa√ß√£o dos tributos sobre faturamento e sobre lucro
        tributos_faturamento = ["ICMS", "ICMS-ST", "PIS", "COFINS", "IPI"]
        tributos_lucro = ["IRPJ", "CSLL"]
        
        dados_tabela = []
        total_tributos = 0
        total_tributos_faturamento = 0
        total_tributos_lucro = 0
        
        for tributo in tributos:
            valor = valores[tributo]
            if tributo in tributos_faturamento:
                perc = (valor / faturamento_total) * 100 if faturamento_total > 0 else 0
                total_tributos_faturamento += valor
            else:
                if lucro_liq_total > 0:
                    perc = (valor / lucro_liq_total) * 100
                    total_tributos_lucro += valor
                else:
                    perc = 0  # N√£o considera IRPJ e CSLL se lucro ‚â§ 0
                    valor = 0
            total_tributos += valor
            dados_tabela.append([tributo, valor, perc])
        
        # Criando DataFrame para exibi√ß√£o
        df_fiscal = pd.DataFrame(dados_tabela, columns=["Tributo", "Valor (R$)", "% Base Refer√™ncia"])
        df_fiscal["Valor (R$)"] = df_fiscal["Valor (R$)"].apply(formatar_moeda)
        df_fiscal["% Base Refer√™ncia"] = df_fiscal["% Base Refer√™ncia"].apply(lambda x: f"{x:.2f}%")
        
        # Exibi√ß√£o
        st.subheader("üìÑ Resumo dos Tributos")
        st.dataframe(df_fiscal, use_container_width=True)
        
        # Exibi√ß√£o dos Totalizadores
        colt1, colt2, colt3 = st.columns(3)
        colt1.metric("Total Tributos Faturamento (R$)", formatar_moeda(total_tributos_faturamento))
        colt2.metric("Total Tributos sobre Lucro (R$)", formatar_moeda(total_tributos_lucro if lucro_liq_total > 0 else 0))
        colt3.metric("Total Geral Tributos (R$)", formatar_moeda(total_tributos))
        # =============================
        # GR√ÅFICO DA CARGA TRIBUT√ÅRIA
        # =============================
        
        st.markdown("---")
        st.subheader("üìä Carga Tribut√°ria sobre Faturamento e Lucro")
        
        # Prepara dados para gr√°fico
        dados_grafico = []
        for tributo, col in tributos.items():
            valor = valores[tributo]
            if tributo in tributos_faturamento:
                perc = (valor / faturamento_total) * 100 if faturamento_total > 0 else 0
                base = "Faturamento Bruto"
            else:
                if lucro_liq_total > 0:
                    perc = (valor / lucro_liq_total) * 100
                    base = "Lucro L√≠quido"
                else:
                    perc = 0
                    valor = 0
                    base = "Lucro L√≠quido"
            dados_grafico.append([tributo, valor, perc, base])
        
        df_grafico = pd.DataFrame(dados_grafico, columns=["Tributo", "Valor (R$)", "% Base", "Base"])
        
        # Remove tributos zerados
        df_grafico = df_grafico[df_grafico["Valor (R$)"] > 0]
        
        # Gr√°fico de barras
        fig = px.bar(
            df_grafico,
            x="% Base",
            y="Tributo",
            color="Base",
            text="% Base",
            orientation="h",
            title="Participa√ß√£o dos Tributos nas Bases de C√°lculo"
        )
        
        fig.update_layout(xaxis_title="% Base", yaxis_title="Tributo")
        fig.update_traces(texttemplate="%{text:.2f}%", textposition="outside")
        
        st.plotly_chart(fig, use_container_width=True)

        # =============================
        # NOTA EXPLICATIVA E METODOLOGIA DE C√ÅLCULO
        # =============================
        
        st.markdown("---")
        st.header("‚ÑπÔ∏è Nota Explicativa e Metodologia de C√°lculo")
        
        st.markdown("""
        ### üü¢ Metodologia Aplicada
        
        #### 1Ô∏è‚É£ **An√°lise Comercial**
        O relat√≥rio consolida informa√ß√µes de faturamento, volume, pre√ßo m√©dio e lucro l√≠quido com base nos dados da aba **CARTEIRA**, considerando os seguintes filtros:
        - Cliente
        - UF (Estado)
        - Produto (SKU)
        - Supervisor
        - Vendedor
        
        O c√°lculo da margem de lucro considera o resultado l√≠quido da venda (descontados contratos, comiss√µes, despesas e tributos).
        
        #### 2Ô∏è‚É£ **An√°lise de Lucro**
        O relat√≥rio apresenta:
        - **Lucro por Cliente**
        - **Lucro por Produto (SKU)**
        - **An√°lise Detalhada do Pre√ßo Unit√°rio e Lucro por SKU**
          - Pre√ßo Unit√°rio M√©dio, M√≠nimo e M√°ximo
          - % de Lucro sobre cada um destes pre√ßos
          - Lucro Unit√°rio por SKU
        - **Peso do Contrato por Cliente**
          - Percentual do valor do contrato sobre o faturamento
          - Impacto do contrato na margem de lucro
          - As linhas com % Lucro Negativo est√£o destacadas em vermelho
        
        #### 3Ô∏è‚É£ **An√°lise Fiscal**
        A an√°lise fiscal considera os tributos destacados na nota fiscal:
        - ICMS
        - ICMS-ST (destaque separado, n√£o comp√µe lucro)
        - PIS
        - COFINS
        - IPI
        - IRPJ (sobre Lucro L√≠quido)
        - CSLL (sobre Lucro L√≠quido)
        
        ##### Crit√©rios:
        - A **Participa√ß√£o dos Tributos no Faturamento Bruto** considera:
            - ICMS, ICMS-ST, PIS, COFINS, IPI.
        - A **Participa√ß√£o dos Tributos sobre o Lucro L√≠quido** considera:
            - IRPJ e CSLL somente se o lucro l√≠quido for positivo.
        
        O gr√°fico fiscal foi ajustado para:
        - Separar a base de c√°lculo (Faturamento Bruto ou Lucro L√≠quido).
        - Remover tributos zerados ou n√£o aplic√°veis no per√≠odo.
        
        Al√©m disso, o relat√≥rio calcula:
        - **Total de Tributos Pagos** sobre cada base.
        - Percentual total da carga tribut√°ria.
        
        #### 4Ô∏è‚É£ **Importante**
        Os percentuais de tributos s√£o calculados exclusivamente para an√°lise gerencial, sem car√°ter de apura√ß√£o oficial.
        
        ---
        
        ### üìÑ **Resumo dos C√°lculos**
        - **% Lucro = (Lucro L√≠quido / Faturamento) x 100**
        - **% Contrato = (Total Contrato / Faturamento) x 100**
        - **% Lucro Ap√≥s Contrato = ((Lucro L√≠quido - Total Contrato) / Faturamento) x 100**
        - **Participa√ß√£o do Tributo = (Tributo / Base de C√°lculo) x 100**
        
        """)
        
        st.markdown("---")
        st.info("""
        Este relat√≥rio foi elaborado para oferecer uma vis√£o executiva integrada entre An√°lise Comercial e Fiscal.
        A estrutura, c√°lculos e indicadores seguem boas pr√°ticas de gest√£o de resultados no regime de **Lucro Real**.
        Para proje√ß√µes, simula√ß√µes ou cen√°rios, utilize m√≥dulos espec√≠ficos a serem disponibilizados.
        """)

